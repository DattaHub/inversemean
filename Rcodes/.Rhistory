panel.grid.minor = element_blank(),
panel.border = element_blank())
plot_counts + plot_percentages
data_percentages
plot_counts
library(ggplot2)
library(ggtext)
# Create a data frame with the revised data
data <- data.frame(
Constituency = c("A", "B", "C"),
PartyX = c(2500, 1500, 100),
PartyY = c(3000, 50, 50),
PartyZ = c(500, 2500, 500),
Winner = c("Y", "Z", "Z")
)
# Calculate vote totals for each constituency
data$Constituency_Total <- rowSums(data[, c("PartyX", "PartyY", "PartyZ")])
# Reshape the data in a "tidy" format for counts
data_counts <- tidyr::gather(data, Party, Votes, -Constituency, -Winner, -Constituency_Total)
# Calculate vote percentages across constituencies
data$X_pct <- (data$PartyX / data$Constituency_Total) * 100
data$Y_pct <- (data$PartyY / data$Constituency_Total) * 100
data$Z_pct <- (data$PartyZ / data$Constituency_Total) * 100
# Reshape the data in a "tidy" format for percentages
data_percentages <- tidyr::gather(data, Party, Percentages, -Constituency, -Winner, starts_with("Party"))
data_percentages <- data_percentages[13:21,]
# Define color-blind friendly colors
colors <- c("#1F77B4", "#FF7F0E", "#2CA02C")
# Create the plot for vote counts
(plot_counts <- ggplot(data_counts, aes(x = Constituency, y = Votes, fill = Party)) +
geom_bar(stat = "identity") +
labs(title = "Vote Counts",
x = "Constituency",
y = "Vote Count",
fill = "Party") +
scale_fill_manual(values = colors) +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank()))
# Create the plot for vote percentages
(plot_percentages <- ggplot(data_percentages, aes(x = Constituency, y = Percentages, fill = Party)) +
geom_bar(stat = "identity") +
labs(title = "Vote Percentages",
x = "Constituency",
y = "Vote Percentage",
fill = "Party") +
scale_fill_manual(values = colors) +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank()))
library(patchwork)
plot_counts + plot_percentages
######################### vectorized
rm(list=ls())
library(plyr)
library(rstan)
library(parallel)
# library(rbenchmark)
library(reshape2)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
########## HS Code ############
cauchy.code = "
data {
int<lower=0> J;
vector[J] Y;
}
parameters {
real<lower=0> u[J];
}
model {
for (i in 1:J){
u[i] ~ cauchy(0, 1);
Y[i] ~ normal(1/u[i], 1);
}
}
"
cauchy.fit = stan_model(model_code=cauchy.code, model_name="Cauchy")
######################### vectorized
rm(list=ls())
library(plyr)
library(rstan)
library(parallel)
# library(rbenchmark)
library(reshape2)
library(here)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
color_scheme_set("brightblue")
cauchy.code <- file.path(here("cauchy_code.stan"))
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
cauchy.code <- file.path(here("cauchy_code.stan"))
######################### vectorized
rm(list=ls())
library(plyr)
library(rstan)
library(parallel)
# library(rbenchmark)
library(reshape2)
library(here)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
cauchy.code <- file.path(here("cauchy_code.stan"))
cauchy.mod <- cmdstan_model(cauchy.code)
cauchy.fit <- cauchy.mod$sample(
data = c.data, seed = 123,  chains = 1,
parallel_chains = 1,  refresh = 10,
iter_sampling = 10000, iter_warmup = 5000,
init = 0)
J = 200
y = seq(0,30,length.out = J)
u.mean = rep(0,J)
for (i in 1:J)
c.data = list('J'=J, 'Y' = y)
stan.iters = 1000
seed.val = 495
cauchy.fit <- cauchy.mod$sample(
data = c.data, seed = 123,  chains = 1,
parallel_chains = 1,  refresh = 10,
iter_sampling = stan.iters, iter_warmup = stan.iters/2,
init = seed.val)
cauchy.fit <- cauchy.mod$sample(
data = c.data, seed = 123,  chains = 1,
parallel_chains = 1,  refresh = 10,
iter_sampling = stan.iters, iter_warmup = stan.iters/2,
init = 0)
library(posterior)
cauchy.array <- cauchy.fit$draws("u")
cauchy.u.df <- as_draws_df(cauchy.array) # as_draws_matrix() for matrix
cauchy.u.summary <- summarise_draws(cauchy.u.df) ## you can also use custome set of summary like ("mean", "median", Mode, "sd", "rhat", "ess_bulk", "ess_tail", "mcse_mean")
plot(y, cauchy.u.summary$mean)
gamma.code <- file.path(here("gamma_code.stan"))
gamma.mod <- cmdstan_model(gamma.code)
gamma.fit <- gamma.mod$sample(
data = c.data, seed = 123,  chains = 1,
parallel_chains = 1,  refresh = 10,
iter_sampling = 10000, iter_warmup = 5000,
init = 0)
library(posterior)
gamma.array <- gamma.fit$draws("u")
gamma.u.df <- as_draws_df(gamma.array) # as_draws_matrix() for matrix
gamma.u.summary <- summarise_draws(gamma.u.df) ## you can also use custome set of summary like ("mean", "median", Mode, "sd", "rhat", "ess_bulk", "ess_tail", "mcse_mean")
plot(y, gamma.u.summary$mean)
invmean.dat <- rbind(data.frame(value = gamma.u.summary$mean, upper = gamma.u.summary$q95, lower = gamma.u.summary$q5, method = "Gamma"),
data.frame(value = cauchy.u.summary$mean, upper = cauchy.u.summary$q95, lower = cauchy.u.summary$q5,method = "Cauchy"))
invmean.dat <- cbind(invmean.dat, "Y" = y)
library(ggplot2)
ggplot(invmean.dat, aes(x = Y, y = value, color = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line()+theme_bw()
ggplot(invmean.dat, aes(x = Y, y = value, fill = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line(color = "firebrick", size = 1) +theme_bw()
ggplot(invmean.dat, aes(x = Y, y = value, fill = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line(color = "firebrick", size = 1) + facet_grid(method~.) +
theme_bw()
ggplot(invmean.dat, aes(x = Y, y = value, fill = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line(color = "firebrick", size = 1) + facet_grid(.~method, scales = "free_y") +
theme_bw()
ggplot(invmean.dat, aes(x = Y, y = value, fill = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line(color = "firebrick", size = 1) + facet_grid(.~method, scales = "free") +
theme_bw()
ggplot(invmean.dat, aes(x = Y, y = value, fill = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line(color = "firebrick", size = 1) + facet_wrap(.~method, scales = "free_y") +
theme_bw()
J = 200
u.mean = seq(1e-5,30,length.out = J)
y = rnorm(1/u.mean, 1)
J = 200
u.mean = seq(1e-3,1e3,length.out = J)
y = rnorm(1/u.mean, 1)
c.data = list('J'=J, 'Y' = y)
stan.iters = 10000
cauchy.fit <- cauchy.mod$sample(
data = c.data, seed = 123,  chains = 1,
parallel_chains = 1,  refresh = 10,
iter_sampling = stan.iters, iter_warmup = stan.iters/2,
init = 0)
library(posterior)
cauchy.array <- cauchy.fit$draws("u")
cauchy.u.df <- as_draws_df(cauchy.array) # as_draws_matrix() for matrix
cauchy.u.summary <- summarise_draws(cauchy.u.df) ## you can also use custome set of summary like ("mean", "median", Mode, "sd", "rhat", "ess_bulk", "ess_tail", "mcse_mean")
plot(y, cauchy.u.summary$mean)
J = 200
u.mean = seq(1e-3,30,length.out = J)
y = rnorm(1/u.mean, 1)
c.data = list('J'=J, 'Y' = y)
stan.iters = 10000
cauchy.fit <- cauchy.mod$sample(
data = c.data, seed = 123,  chains = 1,
parallel_chains = 1,  refresh = 10,
iter_sampling = stan.iters, iter_warmup = stan.iters/2,
init = 0)
library(posterior)
cauchy.array <- cauchy.fit$draws("u")
cauchy.u.df <- as_draws_df(cauchy.array) # as_draws_matrix() for matrix
cauchy.u.summary <- summarise_draws(cauchy.u.df) ## you can also use custome set of summary like ("mean", "median", Mode, "sd", "rhat", "ess_bulk", "ess_tail", "mcse_mean")
plot(y, cauchy.u.summary$mean)
plot(u.mean, cauchy.u.summary$mean)
u.mean
J = 200
u.mean = seq(1e-3,1,length.out = J)
y = rnorm(1/u.mean, 1)
c.data = list('J'=J, 'Y' = y)
stan.iters = 10000
u.mean
y
J = 200
u.mean = seq(1e-5,1,length.out = J)
y = rnorm(1/u.mean, 1)
c.data = list('J'=J, 'Y' = y)
plot(u.mean, y)
J = 200
u.mean = seq(1e-5,1,length.out = J)
y = rnorm(1/u.mean, 0.1)
plot(u.mean, y)
plot(y,u.mean)
plot(u.mean, y)
J = 200
u.mean = seq(1e-5,1,length.out = J)
y = rnorm(J, 1/u.mean, 0.1)
plot(u.mean, y)
# u.mean = seq(1e-5,1,length.out = J)
u.mean = rbeta(J, 1/2, 1)
y = rnorm(J, 1/u.mean, 0.1)
c.data = list('J'=J, 'Y' = y)
plot(u.mean, y)
# u.mean = seq(1e-5,1,length.out = J)
u.mean = rbeta(J, 1/2, 1)
y = rnorm(J, 1/u.mean, 0.1)
plot(u.mean, y)
# u.mean = seq(1e-5,1,length.out = J)
u.mean = rbeta(J, 0.1, 10)
y = rnorm(J, 1/u.mean, 0.1)
plot(u.mean, y)
# u.mean = seq(1e-5,1,length.out = J)
u.mean = rbeta(J, 0.5, 10)
y = rnorm(J, 1/u.mean, 0.1)
plot(u.mean, y)
# u.mean = seq(1e-5,1,length.out = J)
u.mean = rbeta(J, 0.5, 2)
y = rnorm(J, 1/u.mean, 0.1)
plot(u.mean, y)
# u.mean = seq(1e-5,1,length.out = J)
u.mean = rbeta(J, 0.9, 2)
y = rnorm(J, 1/u.mean, 0.1)
plot(u.mean, y)
# u.mean = seq(1e-5,1,length.out = J)
u.mean = rbeta(J, 0.9, 10)
y = rnorm(J, 1/u.mean, 0.1)
plot(u.mean, y)
c.data = list('J'=J, 'Y' = y)
stan.iters = 10000
cauchy.fit <- cauchy.mod$sample(
data = c.data, seed = 123,  chains = 1,
parallel_chains = 1,  refresh = 10,
iter_sampling = stan.iters, iter_warmup = stan.iters/2,
init = 0)
library(posterior)
cauchy.array <- cauchy.fit$draws("u")
cauchy.u.df <- as_draws_df(cauchy.array) # as_draws_matrix() for matrix
cauchy.u.summary <- summarise_draws(cauchy.u.df) ## you can also use custome set of summary like ("mean", "median", Mode, "sd", "rhat", "ess_bulk", "ess_tail", "mcse_mean")
plot(u.mean, cauchy.u.summary$mean)
gamma.code <- file.path(here("gamma_code.stan"))
gamma.mod <- cmdstan_model(gamma.code)
gamma.fit <- gamma.mod$sample(
data = c.data, seed = 123,  chains = 1,
parallel_chains = 1,  refresh = 10,
iter_sampling = 10000, iter_warmup = 5000,
init = 0)
library(posterior)
gamma.array <- gamma.fit$draws("u")
gamma.u.df <- as_draws_df(gamma.array) # as_draws_matrix() for matrix
gamma.u.summary <- summarise_draws(gamma.u.df) ## you can also use custome set of summary like ("mean", "median", Mode, "sd", "rhat", "ess_bulk", "ess_tail", "mcse_mean")
plot(y, gamma.u.summary$mean)
plot(y, cauchy.u.summary$mean)
invmean.dat <- rbind(data.frame(value = gamma.u.summary$mean, upper = gamma.u.summary$q95, lower = gamma.u.summary$q5, method = "Gamma"),
data.frame(value = cauchy.u.summary$mean, upper = cauchy.u.summary$q95, lower = cauchy.u.summary$q5,method = "Cauchy"))
invmean.dat <- cbind(invmean.dat, "Y" = y)
library(ggplot2)
ggplot(invmean.dat, aes(x = Y, y = value, fill = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line(color = "firebrick", size = 1) + facet_wrap(.~method, scales = "free_y") +
theme_bw()
ggplot(invmean.dat, aes(x = u,mean, y = value, fill = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line(color = "firebrick", size = 1) + facet_wrap(.~method, scales = "free_y") +
theme_bw()
ggplot(invmean.dat, aes(x = u.mean, y = value, fill = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line(color = "firebrick", size = 1) + facet_wrap(.~method, scales = "free_y") +
theme_bw()
y
u.mean
invmean.dat <- rbind(data.frame(value = gamma.u.summary$mean, upper = gamma.u.summary$q95, lower = gamma.u.summary$q5, method = "Gamma"),
data.frame(value = cauchy.u.summary$mean, upper = cauchy.u.summary$q95, lower = cauchy.u.summary$q5,method = "Cauchy"))
invmean.dat <- cbind(invmean.dat, "Y" = y, "U" = u.mean)
library(ggplot2)
ggplot(invmean.dat, aes(x = U, y = value, fill = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line(color = "firebrick", size = 1) + facet_wrap(.~method, scales = "free_y") +
theme_bw()
ggplot(invmean.dat, aes(x = Y, y = value, fill = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line(color = "firebrick", size = 1) + facet_wrap(.~method, scales = "free_y") +
theme_bw()
J = 200
# u.mean = seq(1e-5,1,length.out = J)
u.mean = rt(J, df =1)
y = rnorm(J, 1/u.mean, 0.1)
plot(u.mean, y)
# u.mean = seq(1e-5,1,length.out = J)
u.mean = abs(rt(J, df =1))
y = rnorm(J, 1/u.mean, 0.1)
plot(u.mean, y)
c.data = list('J'=J, 'Y' = y)
c.data = list('J'=J, 'Y' = y)
stan.iters = 5000
cauchy.fit <- cauchy.mod$sample(
data = c.data, seed = 123,  chains = 1,
parallel_chains = 1,  refresh = 10,
iter_sampling = stan.iters, iter_warmup = stan.iters/2,
init = 0)
library(posterior)
cauchy.array <- cauchy.fit$draws("u")
cauchy.u.df <- as_draws_df(cauchy.array) # as_draws_matrix() for matrix
cauchy.u.summary <- summarise_draws(cauchy.u.df) ## you can also use custome set of summary like ("mean", "median", Mode, "sd", "rhat", "ess_bulk", "ess_tail", "mcse_mean")
plot(y, cauchy.u.summary$mean)
gamma.code <- file.path(here("gamma_code.stan"))
gamma.mod <- cmdstan_model(gamma.code)
gamma.fit <- gamma.mod$sample(
data = c.data, seed = 123,  chains = 1,
parallel_chains = 1,  refresh = 10,
iter_sampling = stan.iters, iter_warmup = stan.iters/2,  init = 0)
library(posterior)
gamma.array <- gamma.fit$draws("u")
gamma.u.df <- as_draws_df(gamma.array) # as_draws_matrix() for matrix
gamma.u.summary <- summarise_draws(gamma.u.df) ## you can also use custome set of summary like ("mean", "median", Mode, "sd", "rhat", "ess_bulk", "ess_tail", "mcse_mean")
plot(y, gamma.u.summary$mean)
invmean.dat <- rbind(data.frame(value = gamma.u.summary$mean, upper = gamma.u.summary$q95, lower = gamma.u.summary$q5, method = "Gamma"),
data.frame(value = cauchy.u.summary$mean, upper = cauchy.u.summary$q95, lower = cauchy.u.summary$q5,method = "Cauchy"))
invmean.dat <- cbind(invmean.dat, "Y" = y, "U" = u.mean)
library(ggplot2)
ggplot(invmean.dat, aes(x = Y, y = value, fill = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line(color = "firebrick", size = 1) + facet_wrap(.~method, scales = "free_y") +
theme_bw()
ggplot(invmean.dat, aes(x = U, y = value, fill = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line(color = "firebrick", size = 1) + facet_wrap(.~method, scales = "free_y") +
theme_bw()
# u.mean = seq(1e-5,1,length.out = J)
# u.mean = abs(rt(J, df =1))
u.mean = seq(0, 30)
y = rnorm(J, 1/u.mean, 1)
plot(u.mean, y)
# u.mean = seq(1e-5,1,length.out = J)
# u.mean = abs(rt(J, df =1))
u.mean = seq(0, 30, length.out = J)
y = rnorm(J, 1/u.mean, 1)
plot(u.mean, y)
c.data = list('J'=J, 'Y' = y)
stan.iters = 5000
cauchy.fit <- cauchy.mod$sample(
data = c.data, seed = 123,  chains = 1,
parallel_chains = 1,  refresh = 10,
iter_sampling = stan.iters, iter_warmup = stan.iters/2,
init = 0)
# u.mean = seq(1e-5,1,length.out = J)
# u.mean = abs(rt(J, df =1))
u.mean = seq(1e-5, 30, length.out = J)
y = rnorm(J, 1/u.mean, 1)
plot(u.mean, y)
c.data = list('J'=J, 'Y' = y)
stan.iters = 5000
cauchy.fit <- cauchy.mod$sample(
data = c.data, seed = 123,  chains = 1,
parallel_chains = 1,  refresh = 10,
iter_sampling = stan.iters, iter_warmup = stan.iters/2,
init = 0)
cauchy.array <- cauchy.fit$draws("u")
cauchy.u.df <- as_draws_df(cauchy.array) # as_draws_matrix() for matrix
cauchy.u.summary <- summarise_draws(cauchy.u.df) ## you can also use custome set of summary like ("mean", "median", Mode, "sd", "rhat", "ess_bulk", "ess_tail", "mcse_mean")
plot(y, cauchy.u.summary$mean)
cauchy.u.summary$mean
plot(u.mean, cauchy.u.summary$mean)
J = 200
y= seq(0, 30, length.out = J)
c.data = list('J'=J, 'Y' = y)
stan.iters = 5000
cauchy.fit <- cauchy.mod$sample(
data = c.data, seed = 123,  chains = 1,
parallel_chains = 1,  refresh = 10,
iter_sampling = stan.iters, iter_warmup = stan.iters/2,
init = 0)
library(posterior)
cauchy.array <- cauchy.fit$draws("u")
cauchy.u.df <- as_draws_df(cauchy.array) # as_draws_matrix() for matrix
cauchy.u.summary <- summarise_draws(cauchy.u.df) ## you can also use custome set of summary like ("mean", "median", Mode, "sd", "rhat", "ess_bulk", "ess_tail", "mcse_mean")
plot(y, cauchy.u.summary$mean)
gamma.code <- file.path(here("gamma_code.stan"))
gamma.mod <- cmdstan_model(gamma.code)
gamma.fit <- gamma.mod$sample(
data = c.data, seed = 123,  chains = 1,
parallel_chains = 1,  refresh = 10,
iter_sampling = stan.iters, iter_warmup = stan.iters/2,  init = 0)
library(posterior)
gamma.array <- gamma.fit$draws("u")
gamma.u.df <- as_draws_df(gamma.array) # as_draws_matrix() for matrix
gamma.u.summary <- summarise_draws(gamma.u.df) ## you can also use custome set of summary like ("mean", "median", Mode, "sd", "rhat", "ess_bulk", "ess_tail", "mcse_mean")
plot(y, gamma.u.summary$mean)
invmean.dat <- rbind(data.frame(value = gamma.u.summary$mean, upper = gamma.u.summary$q95, lower = gamma.u.summary$q5, method = "Gamma"),
data.frame(value = cauchy.u.summary$mean, upper = cauchy.u.summary$q95, lower = cauchy.u.summary$q5,method = "Cauchy"))
invmean.dat <- cbind(invmean.dat, "Y" = y)
library(ggplot2)
ggplot(invmean.dat, aes(x = Y, y = value, fill = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line(color = "firebrick", size = 1) + facet_wrap(.~method, scales = "free_y") +
theme_bw()
ggplot(invmean.dat, aes(x = Y, y = value, fill = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line(color = "firebrick", size = 1) + facet_wrap(method~., scales = "free_y") +
theme_bw()
ggplot(invmean.dat, aes(x = Y, y = value, fill = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line(color = "firebrick", size = 1) + facet_wrap(method~, scales = "free_y") +
ggplot(invmean.dat, aes(x = Y, y = value, fill = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line(color = "firebrick", size = 1) + facet_wrap(method~., scales = "free_y") +
theme_bw()
ggplot(invmean.dat, aes(x = Y, y = value, fill = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line(color = "firebrick", size = 1) + facet_wrap(.~method, scales = "free_y") +
theme_bw()
?facet_wrap
ggplot(invmean.dat, aes(x = Y, y = value, fill = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line(color = "firebrick", size = 1) + facet_wrap(.~method, ncol = 1, scales = "free_y") +
theme_bw()
ggplot(invmean.dat, aes(x = Y, y = value, fill = method)) +
geom_ribbon(aes(ymin = lower,
ymax = upper, group = method),    # shadowing cnf intervals
fill = "steelblue2") +
geom_line(color = "firebrick", size = 1) + facet_wrap(.~method, ncol = 1, scales = "free_y") +
theme_bw()
